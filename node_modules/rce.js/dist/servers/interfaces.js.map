{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../src/servers/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["export interface ServerOptions {\n  identifier: string;\n  serverId: number | number[];\n  region: \"EU\" | \"US\";\n  state?: any[];\n  playerRefreshing?: boolean;\n  radioRefreshing?: boolean;\n  extendedEventRefreshing?: boolean;\n  intents: string[];\n}\n\nexport interface ServerPlayer {\n  ign: string;\n  ping: number;\n  secondsConnected: number;\n  health: number;\n}\n\nexport interface RustServer {\n  identifier: string;\n  serverId: number[]; // url, backend\n  region: \"EU\" | \"US\";\n  intervals: RustServerIntervals;\n  flags: string[];\n  state: any[];\n  status:\n    | \"STOPPING\"\n    | \"MAINTENANCE\"\n    | \"UPDATING\"\n    | \"STOPPED\"\n    | \"STARTING\"\n    | \"RUNNING\"\n    | \"SUSPENDED\"\n    | \"UNKNOWN\";\n  players: ServerPlayer[];\n  frequencies: number[];\n  intents: string[];\n}\n\ninterface RustServerIntervals {\n  playerRefreshing?: { enabled: boolean; interval?: NodeJS.Timeout };\n  radioRefreshing?: { enabled: boolean; interval?: NodeJS.Timeout };\n  extendedEventRefreshing?: { enabled: boolean; interval?: NodeJS.Timeout };\n}\n\nexport interface CommandRequest {\n  identifier: string;\n  command: string;\n  timestamp?: string;\n  resolve: (value: CommandResponse) => void;\n  reject: (reason: any) => void;\n  timeout?: ReturnType<typeof setTimeout>;\n}\n\nexport interface CommandResponse {\n  ok: boolean;\n  response?: string;\n  error?: string;\n}\n\nexport interface RustServerInformation {\n  Hostname: string;\n  MaxPlayers: number;\n  Players: number;\n  Queued: number;\n  Joining: number;\n  EntityCount: number;\n  GameTime: string;\n  Uptime: number;\n  Map: \"Procedural Map\";\n  Framerate: number;\n  Memory: number;\n  Collections: number;\n  NetworkIn: number;\n  NetworkOut: number;\n  Restarting: boolean;\n  SaveCreatedTime: string;\n}\n"]}