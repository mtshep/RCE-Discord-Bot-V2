{"version":3,"file":"Auth.js","sourceRoot":"","sources":["../../src/auth/Auth.ts"],"names":[],"mappings":"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","sourcesContent":["import { load } from \"cheerio\";\nimport type { GPortalAuthData } from \"./interfaces\";\nimport type RCEManager from \"../Manager\";\nimport { GPortalRoutes } from \"../constants\";\n\nexport default class GPortalAuth {\n  private _manager: RCEManager;\n  private _authData: GPortalAuthData;\n  private _refreshTimeout: NodeJS.Timeout;\n\n  public constructor(manager: RCEManager) {\n    this._manager = manager;\n  }\n\n  /**\n   *\n   * @param username The G-Portal email address\n   * @param password The G-Portal password\n   *\n   * @returns {void}\n   * @throws {Error} If the login fails\n   */\n  public async login(username: string, password: string) {\n    this._manager.logger.debug(\"Logging in to G-Portal\");\n\n    try {\n      const authUrl = new URL(GPortalRoutes.Auth);\n      authUrl.searchParams.append(\"client_id\", \"website\");\n      authUrl.searchParams.append(\"redirect_uri\", GPortalRoutes.Home);\n      authUrl.searchParams.append(\"response_mode\", \"query\");\n      authUrl.searchParams.append(\"response_type\", \"code\");\n      authUrl.searchParams.append(\"scope\", \"openid email profile gportal\");\n      const loginResponse = await fetch(authUrl);\n      if (!loginResponse.ok) {\n        throw new Error(\"Failed to fetch the login page\");\n      }\n\n      const loginPage = await loginResponse.text();\n      const cookies = loginResponse.headers.get(\"set-cookie\");\n\n      const $ = load(loginPage);\n      const url = $(\"#kc-form-login\").attr(\"action\");\n\n      if (!url) {\n        throw new Error(\"Failed to extract the login URL\");\n      }\n\n      const authResponse = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          Cookie: cookies,\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        body: new URLSearchParams({\n          username,\n          password,\n          credentialId: \"\",\n        }),\n      });\n\n      if (!authResponse.ok) {\n        throw new Error(\"Failed to authenticate\");\n      }\n\n      const code = new URLSearchParams(new URL(authResponse.url).search).get(\n        \"code\"\n      );\n      if (!code) {\n        throw new Error(\"Failed to extract the authentication code\");\n      }\n\n      const tokenResponse = await fetch(GPortalRoutes.Token, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        body: new URLSearchParams({\n          code,\n          grant_type: \"authorization_code\",\n          client_id: \"website\",\n          redirect_uri: GPortalRoutes.Home,\n        }),\n      });\n\n      if (!tokenResponse.ok) {\n        throw new Error(\"Failed to fetch the authentication token\");\n      }\n\n      this._authData = await tokenResponse.json();\n\n      this._refreshTimeout = setTimeout(\n        () => this.refresh(),\n        (this._authData.expires_in - 60) * 1_000\n      );\n    } catch (error) {\n      throw new Error(`Failed to login: ${error.message}`);\n    }\n  }\n\n  /**\n   * Refresh the authentication token\n   * @returns {void}\n   * @throws {Error} If the refresh fails\n   */\n  private async refresh() {\n    if (!this._authData?.refresh_token) {\n      throw new Error(\"Missing refresh token\");\n    }\n\n    this._manager.logger.debug(\"Refreshing The Authentication Token\");\n\n    try {\n      const tokenResponse = await fetch(GPortalRoutes.Token, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        body: new URLSearchParams({\n          refresh_token: this._authData.refresh_token,\n          grant_type: \"refresh_token\",\n          client_id: \"website\",\n        }),\n      });\n\n      if (!tokenResponse.ok) {\n        throw new Error(\"Failed to fetch the authentication token\");\n      }\n\n      this._authData = await tokenResponse.json();\n\n      this._refreshTimeout = setTimeout(\n        () => this.refresh(),\n        (this._authData.expires_in - 60) * 1_000\n      );\n\n      this._manager.logger.debug(\"Token Refreshed\");\n    } catch (error) {\n      throw new Error(`Failed to refresh the token: ${error.message}`);\n    }\n  }\n\n  public destroy() {\n    clearTimeout(this._refreshTimeout);\n  }\n\n  /**\n   * Get the access token\n   * @returns {string} The access token\n   * @returns {undefined} If the access token is not available\n   */\n  get accessToken() {\n    return this._authData?.access_token;\n  }\n}\n"]}