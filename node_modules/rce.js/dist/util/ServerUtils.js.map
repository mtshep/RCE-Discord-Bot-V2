{"version":3,"file":"ServerUtils.js","sourceRoot":"","sources":["../../src/util/ServerUtils.ts"],"names":[],"mappings":";;AAEA,4CAAwC;AAExC,MAAqB,WAAW;IACvB,MAAM,CAAC,KAAK,CAAC,OAAmB,EAAE,KAAa,EAAE,MAAmB;QACzE,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAQ,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;IACzD,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,QAAQ,CAC1B,OAAmB,EACnB,MAAkB,EAClB,KAAc;QAEd,IAAI,KAAK,EAAE,CAAC;YACV,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC;aAAM,CAAC;YACN,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;QACjE,CAAC;QAED,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAExB,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC/B,MAAM,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QACzD,OAAO,CAAC,MAAM,CAAC,IAAI,CACjB,IAAI,MAAM,CAAC,UAAU,YAAY,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAAE,CAC/D,CAAC;QAEF,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAQ,CAAC,WAAW,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;IAC/D,CAAC;IAEO,MAAM,CAAC,KAAK,CAAC,EAAU;QAC7B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;IAC3D,CAAC;CACF;AA9BD,8BA8BC","sourcesContent":["import type { RustServer } from \"../servers/interfaces\";\nimport type RCEManager from \"../Manager\";\nimport { RCEEvent } from \"../constants\";\n\nexport default class ServerUtils {\n  public static error(manager: RCEManager, error: string, server?: RustServer) {\n    manager.events.emit(RCEEvent.Error, { error, server });\n  }\n\n  public static async setReady(\n    manager: RCEManager,\n    server: RustServer,\n    ready: boolean\n  ) {\n    if (ready) {\n      server.flags.push(\"READY\");\n    } else {\n      server.flags = server.flags.filter((flag) => flag !== \"READY\");\n    }\n\n    await this.sleep(3_000);\n\n    manager.servers.update(server);\n    await manager.servers.command(server.identifier, \"save\");\n    manager.logger.info(\n      `[${server.identifier}] Server ${ready ? \"Ready\" : \"Unready\"}`\n    );\n\n    manager.events.emit(RCEEvent.ServerReady, { server, ready });\n  }\n\n  private static sleep(ms: number) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n}\n"]}